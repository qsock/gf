// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// UserDao is the data access object for table user.
type UserDao struct {
	Table   string      // Table is the underlying table name of the DAO.
	Group   string      // Group is the database configuration group name of current DAO.
	Columns UserColumns // Columns contains all the column names of Table for convenient usage.
}

// UserColumns defines and stores column names for table user.
type UserColumns struct {
	Host                 string //
	User                 string //
	SelectPriv           string //
	InsertPriv           string //
	UpdatePriv           string //
	DeletePriv           string //
	CreatePriv           string //
	DropPriv             string //
	ReloadPriv           string //
	ShutdownPriv         string //
	ProcessPriv          string //
	FilePriv             string //
	GrantPriv            string //
	ReferencesPriv       string //
	IndexPriv            string //
	AlterPriv            string //
	ShowDbPriv           string //
	SuperPriv            string //
	CreateTmpTablePriv   string //
	LockTablesPriv       string //
	ExecutePriv          string //
	ReplSlavePriv        string //
	ReplClientPriv       string //
	CreateViewPriv       string //
	ShowViewPriv         string //
	CreateRoutinePriv    string //
	AlterRoutinePriv     string //
	CreateUserPriv       string //
	EventPriv            string //
	TriggerPriv          string //
	CreateTablespacePriv string //
	SslType              string //
	SslCipher            string //
	X509Issuer           string //
	X509Subject          string //
	MaxQuestions         string //
	MaxUpdates           string //
	MaxConnections       string //
	MaxUserConnections   string //
	Plugin               string //
	AuthenticationString string //
	PasswordExpired      string //
	PasswordLastChanged  string //
	PasswordLifetime     string //
	AccountLocked        string //
}

//  userColumns holds the columns for table user.
var userColumns = UserColumns{
	Host:                 "Host",
	User:                 "User",
	SelectPriv:           "Select_priv",
	InsertPriv:           "Insert_priv",
	UpdatePriv:           "Update_priv",
	DeletePriv:           "Delete_priv",
	CreatePriv:           "Create_priv",
	DropPriv:             "Drop_priv",
	ReloadPriv:           "Reload_priv",
	ShutdownPriv:         "Shutdown_priv",
	ProcessPriv:          "Process_priv",
	FilePriv:             "File_priv",
	GrantPriv:            "Grant_priv",
	ReferencesPriv:       "References_priv",
	IndexPriv:            "Index_priv",
	AlterPriv:            "Alter_priv",
	ShowDbPriv:           "Show_db_priv",
	SuperPriv:            "Super_priv",
	CreateTmpTablePriv:   "Create_tmp_table_priv",
	LockTablesPriv:       "Lock_tables_priv",
	ExecutePriv:          "Execute_priv",
	ReplSlavePriv:        "Repl_slave_priv",
	ReplClientPriv:       "Repl_client_priv",
	CreateViewPriv:       "Create_view_priv",
	ShowViewPriv:         "Show_view_priv",
	CreateRoutinePriv:    "Create_routine_priv",
	AlterRoutinePriv:     "Alter_routine_priv",
	CreateUserPriv:       "Create_user_priv",
	EventPriv:            "Event_priv",
	TriggerPriv:          "Trigger_priv",
	CreateTablespacePriv: "Create_tablespace_priv",
	SslType:              "ssl_type",
	SslCipher:            "ssl_cipher",
	X509Issuer:           "x509_issuer",
	X509Subject:          "x509_subject",
	MaxQuestions:         "max_questions",
	MaxUpdates:           "max_updates",
	MaxConnections:       "max_connections",
	MaxUserConnections:   "max_user_connections",
	Plugin:               "plugin",
	AuthenticationString: "authentication_string",
	PasswordExpired:      "password_expired",
	PasswordLastChanged:  "password_last_changed",
	PasswordLifetime:     "password_lifetime",
	AccountLocked:        "account_locked",
}

// NewUserDao creates and returns a new DAO object for table data access.
func NewUserDao() *UserDao {
	return &UserDao{
		Group:   "default",
		Table:   "user",
		Columns: userColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *UserDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *UserDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *UserDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
